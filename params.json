{"name":"Averydb","tagline":"Convert, Combine, Calculate","body":"AveryDB\r\n======= \r\nRunning\r\n-------\r\nTo use, you need to have Python 2.7 (2.6 will probably work) and PyGTK installed.\r\nUse the PyGTK all-in-one installer from http://ftp.gnome.org/pub/GNOME/binaries/win32/pygtk/2.24/\r\n\r\nA portable version (doesn't require python and pygtk to be installed) is planned.\r\n\r\nRun the file dbfutil.py\r\n\r\nAbout\r\n-----\r\nThe utility focuses on allowing you to join tables of data stored in separate files and outputting a customized result.  \r\nFields can be easily renamed, reordered, created, removed, altered, and perform any calculations for the output value.  \r\nNot least of all, it does everything in one go, so if you're working with large amounts of data you don't have to start\r\none modification, wait for it to end, and start the next. You configure the entire process, from original input files to\r\nthe final version of the output.\r\nSince it's meant to work with multiple formats, you can ignore the joining functionality and just use it as a file \r\nconversion tool (which gives you convenient fine tuning control over the conversion).\r\n![Main Window](/screenshots/main_window.png)\r\nFormats\r\n-------\r\nAveryDB is meant to work with _avery_ format of database, though it's a ways from that goal.  \r\nRight now it lets you input, combine, and output csv, dbf, and sqlite. Excel is on a short list of features to add next.\r\n\r\nJoining\r\n-------\r\nCurrently only left joins are supported. Inner joins (where you only keep matching records) will be added soon.  \r\nCross joins and everything else will be supported in an expert mode, where all the interface tools for setting\r\nup joins will be replaced by a box where you can just enter your own query. At least in the near term.\r\n\r\nField Calculations\r\n------------------\r\nValues from input files are referenced by !filealias.fieldname!\r\nThese values can be used in single line statements like:\r\n\r\n    !values.LAND_HSTD! + !values.LAND_NON_H!\r\n    \r\nOr they can be passed to a custom function like:\r\n\r\n    propertyfrompropid(!Parcels.propid!)\r\n    \r\nAll functions are stored in python files in the fieldcalcs directory. Each file in that directory acts as a\r\nlibrary of functions that can be called within the program. To call my_calc() from mylib.py you would do:\r\n\r\n    mylib.my_calc(!whateverfile.andfield!)\r\n    \r\nClicking the \"calc\" button on the right end of the central toolbar, you can open the calculator window, which\r\nwill display all the available inputs and libraries/functions.  \r\n![Calculator](/screenshots/calculator.png)  \r\nDouble click a function to add it to the value, then double click an input field and it will be inserted in\r\nthe function call.  \r\nHighlight text and double click a function to wrap the function call around the selected text.  \r\nWhen you save a field value in the calculator window the results are immediately shown in the sample output\r\nof the main window. If there is an error in your function, the field value will show as \"!error!\" and the error\r\nmessage will be printed to the console window.\r\nYou can select libraries from the dropdown list, or type the name of any fieldcalcs or python builtin library,\r\nto load a list of its functions.\r\nYou can click \"Library\" to open the fieldcalcs directory, where the the library files are stored, in your system's\r\nfile browser.\r\n\r\nFrom the calculator window you can click the plus button next to the library entry to launch a built-in function\r\neditor.  \r\n![Field Calculations](/screenshots/function_editor.png)  \r\nPressing tab will insert tabs, but these are converted to spaces when saved. Existing code is displayed with spaces,\r\nbut you can mix tabs in when editing it since they'll all be converted.\r\nIf you use an external editor to edit a library file, click the Reload Function button in the function editor window to\r\nload the changes. If there are syntax errors, it will not load and the error will be printed in the console window.\r\nIn the calculator window, \r\n\r\nKeyboard Shortcuts\r\n------------------\r\nWhen the area for editing the fields has focus there are the following shortcuts:\r\n* Delete - remove selected fields\r\n* Alt + Up/Down - move selected fields\r\n* Ctrl + n - add a field before the first selected, or at the end if no records are selected (the list of fields\r\nmust have focus)\r\n\r\nOther Options\r\n-------------\r\n* *Restrict one-to-many joins* - By default, if a record joins to multiple records, it will create multiple output\r\nrecords. If you want one record from your input file to create one record in the output, check the box under the\r\nlist of joins. This is particulary useful with shapefiles, where the dbf file must have the matching records at a\r\nspecific index.\r\n* *Replace Target* - Check this to rename the target file to targetfilename.old and have the output written to its old spot.\r\n* *Default output location* - Under File > Options you can set the default location to write output files. This will be\r\nused when the output filename is just a name and no slashes denoting a path.\r\n\r\nCredits\r\n-------\r\nThis uses the dbfpy library for reading and writing dbf files.\r\nhttp://dbfpy.sourceforge.net/\r\n\r\nAll other code, unless otherwise noted, by Chad [Avery] Spratt.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}